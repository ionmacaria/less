<?php

/**
 * @file
 * Handles compiling of .less files.
 *
 * The theme system allows for nearly all output of the Drupal system to be
 * customized by user themes.
 */
 
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Cache\CacheBackendInterface;
use Drupal\Component\Utility\UrlHelper;

define('LESS_PERMISSION', 'administer less');

define('LESS_AUTOPREFIXER', 'less_autoprefixer');

define('LESS_DEVEL', 'less_devel');
define('LESS_WATCH', 'less_watch');
define('LESS_SOURCE_MAPS', 'less_source_maps');

define('LESS_DIRECTORY', 'public://less');

require_once dirname(__FILE__) . '/includes/less.libraries.inc';

/**
 * Implements hook_hook_info().
 */
function less_hook_info() {

  $less_hooks = array(
    'engines',
    'variables',
    'paths',
    'functions',
  );

  $hooks = array();

  /**
   * We don't have to worry about less_HOOK_SYSTEM_NAME_alter variations here
   * as less_HOOK_alter is run immediately before and should include the
   * MODULE.less.inc file containing any
   * less_HOOK_SYSTEM_NAME_alter() implementations.
   */
  foreach ($less_hooks as $hook) {
    $hooks[] = 'less_' . $hook;
    $hooks[] = 'less_' . $hook . '_alter';
  }

  return array_fill_keys($hooks, array(
    'group' => 'less',
  ));
}

function less_element_info_alter(array &$types) {
  
  $config = \Drupal::config('less.settings');
  
  $types['html']['#pre_render'][] = '_less_pre_render';
  
  if ($config->get(LESS_DEVEL) ?: FALSE) {
    $types['html']['#pre_render'][] = '_less_attach_src';
  }
}

/**
 * Add original .less file path as 'src' attribute to <link />.
 * 
 * @param array $styles
 *   CSS style tags after drupal_pre_render_styles() has run.
 * 
 * @return array
 *   Styles array with 'src' attributes on LESS files.
 * 
 * @see drupal_pre_render_styles()
 */
function _less_attach_src($html) {
  
  foreach ($html['page']['#attached']['html_head'] as $key => $element) {
    if ($element[1] == 'less' && $element[0]['#type'] = 'html_tag' && $element[0]['#tag'] == 'link') {
      $file_url_parts = UrlHelper::parse($element[0]['#attributes']['href']);
      if ($cache = \Drupal::cache()->get('less:watch:' . \Drupal\Component\Utility\Crypt::hashBase64($file_url_parts['path']))) {
        $html['page']['#attached']['html_head'][$key][0]['#attributes']['src'] = $cache->data['less']['input_file'];
      }
    }
  }
  
  return $html;
}

/**
 * Pre-render function for 'style' elements.
 * 
 * Key place where .less files are detected and processed.
 * 
 * @param array $styles
 *   All 'style' elements that are to display on the page.
 * 
 * @return array
 *   Modified style elements pointing to compiled LESS output.
 */
function _less_pre_render($html) {
  
  $config = \Drupal::config('less.settings');
  
  if ($config->get(LESS_WATCH) ?: FALSE) {
    $html['#attached']['library'][] = 'less/less-watch';
  }
  
  $theme = \Drupal::config('system.theme')->get('default');
  
  $library = \Drupal::service('library.discovery')->getLibraryByName($theme, 'less');
  
  if ($library) {
    foreach ($library['css'] as $file_key => $file) {
      if (substr($file['data'], -5) == '.less') {
        
        $defaults = array(
          'less' => less_get_settings(), // Bare defaults for LESS.
        );

        // These items must be reset for consistent operation.
        $nullify = array(
          'less' => array(
            'output_file' => NULL,
            'build_required' => NULL,
          ),
        );
        
        // Merge in any info from $item.
        $file = array_replace_recursive($defaults, $file, $nullify);
        
        $file['less']['input_file'] = $file['data'];
        
        $less_settings = less_get_settings(_less_file_owner($file['less']['input_file']));
        
        // array_replace_recursive() works on keys, flip to not use numeric keys.
        $less_settings['paths'] = array_flip($less_settings['paths']);
        $file['less']['paths'] = array_flip($item['less']['paths']);
        
        // Merge defaults with any per file settings.
        $file['less'] = array_replace_recursive($less_settings, $file['less']);
        
        // First array_flips before merge removed duplicates, so just flip back.
        $file['less']['paths'] = array_flip($file['less']['paths']);
        
        $less_settings = $file['less'];
        
        $input_file = $file['less']['input_file'];
        
        $build_required = FALSE;
        
        if ($less_file_cache = \Drupal::cache()->get('less:devel:' . \Drupal\Component\Utility\Crypt::hashBase64($input_file))) {
          
          // Iterate over each file and check if there are any changes.
          foreach ($less_file_cache->data as $filepath => $filemtime) {
            
            // Only rebuild if there has been a change to a file.
            if (is_file($filepath) && filemtime($filepath) > $filemtime) {
              $build_required = TRUE;
              break;
            }
          }
        }
        else {
          
          // No cache data, force a rebuild for later comparison.
          $build_required = TRUE;
        }
        
        $file['less']['build_required'] = $build_required;
        
        if (!is_file($html['less'][$file['less']['input_file']]['less']['output_file']) || $file['less']['build_required']) {
        
          $output_path_array = array(
            '@less_output_dir' => LESS_DIRECTORY,
            // Strip '.css' extension of filenames following the RTL extension pattern.
            '@input_file_basename' => basename(basename($input_file, '.less'), '.css'),
            // drupal_json_encode() is used because serialize() throws an error with lambda functions.
            '@settings_hash' => \Drupal\Component\Utility\Crypt::hashBase64(Drupal\Component\Serialization\Json::encode($less_settings)),
          );
          
          $output_path = new FormattableMarkup('@less_output_dir/@input_file_basename.@settings_hash.css', $output_path_array);
          
          $output_path = $output_path->__toString();
          
          $file['less']['output_file'] = $output_path;
          
          try {
            
            $engine = less_get_engine($less_settings['input_file']);
            //$engine->setImportDirectories($less_settings['paths']);
            $engine->setSourceMaps($config->get(LESS_SOURCE_MAPS) ?: FALSE, DRUPAL_ROOT, base_path());
            // $engine->modifyVariables($less_settings['variables']);
            $output_data = $engine->compile();
            
            $dependencies = array_merge(array($less_settings['input_file']), (array) $engine->getDependencies());

            $watched_files = array();
            
            foreach ($dependencies as $dependency) {
              
              // Full path on file should enforce uniqueness in associative array.
              $watched_files[drupal_realpath($dependency)] = filemtime($dependency);
            }
            
            if ($config->get(LESS_DEVEL) ?: FALSE) {
              \Drupal::cache()->set('less:devel:' . \Drupal\Component\Utility\Crypt::hashBase64($less_settings['input_file']), $watched_files);
            }
            
          } catch (Exception $e) {
            $message_vars = array(
              '@message' => $e->getMessage(),
              '%input_file' => $less_settings['input_file'],
            );

            \Drupal::logger('LESS')->error(t('LESS error: @message, %input_file', $message_vars));

            if (\Drupal::currentUser()->hasPermission(LESS_PERMISSION)) {
              drupal_set_message(t('LESS error: @message, %input_file', $message_vars), 'error');
            }
          }
          
          global $base_root;
          
          if (isset($output_data)) { 
          
            // Fix paths for images as .css is in different location.
            $output = '';

            // Build the base URL of this CSS file: start with the full URL.
            $css_base_url = file_create_url($file['less']['input_file']);
            
           
            // Move to the parent.
            $css_base_url = substr($css_base_url, 0, strrpos($css_base_url, '/'));
            // Simplify to a relative URL if the stylesheet URL starts with the
            // base URL of the website.
            
            if (substr($css_base_url, 0, strlen($base_root)) == $base_root) {
              $css_base_url = substr($css_base_url, strlen($base_root));             
            }
            
            _less_build_css_path(NULL, $css_base_url . '/');
            
            // Anchor all paths in the CSS with its base URL, ignoring external and absolute paths.
            $output_data .= preg_replace_callback('/url\(\s*[\'"]?(?![a-z]+:|\/+)([^\'")]+)[\'"]?\s*\)/i', '_less_build_css_path', $output_data);
            
            // Ensure the destination directory exists.
            if (_less_ensure_directory(dirname($file['less']['output_file']))) {
              file_unmanaged_save_data($output_data, $file['less']['output_file'], FILE_EXISTS_REPLACE);
            }
            
          }
          
          $less_watch_cache = $file;
  
          $less_watch_cache['data'] = $file['less']['input_file'];
          
          $url = file_create_url($file['less']['output_file']);
          
          
          if ($config->get(LESS_WATCH) ?: FALSE) {
            \Drupal::cache()->set('less:watch:' . \Drupal\Component\Utility\Crypt::hashBase64($url), $less_watch_cache);
          }
          
          if (is_file($file['less']['output_file']) && $file['less'][LESS_AUTOPREFIXER]) {
            if (($lessautoprefixer_library = libraries_load('lessautoprefixer')) && $lessautoprefixer_library['installed']) {
              try {
                \Drupal\less\Classes\LessAutoprefixer::create(drupal_realpath($file['less']['output_file']))->compile();
              }
              catch (Exception $e) {
                $message_vars = array(
                  '@message' => $e->getMessage(),
                  '%input_file' => drupal_realpath($file['less']['output_file']),
                );
                \Drupal::logger('LESS')->error(t('Autoprefixer error: @message, %input_file', $message_vars));
                if (\Drupal::currentUser()->hasPermission(LESS_PERMISSION)) {
                  drupal_set_message(t('Autoprefixer error: @message, %input_file', $message_vars), 'error');
                }
              }
            }
          }
          
          $html['less'][$file['less']['input_file']] = $file;
        }
        
        if (is_file($file['less']['output_file']) && $theme == \Drupal::service('theme.manager')->getActiveTheme()->getName()) {  
          $html['page']['#attached']['html_head'][] = [
            // The data.
            [
              '#type' => 'html_tag',
              // The HTML tag to add, in this case a  tag.
              '#tag' => 'link',
              // The value of the HTML tag, here we want to end up with
              // alert("Hello world!");.
              '#attributes' => array(
                'type' => 'text/css', 
                'rel' => 'stylesheet',
                'href' => file_create_url($file['less']['output_file']), 
                'media' => 'all', 
                'src' => $file['less']['input_file']
              ),
            ],
            // A key, to make it possible to recognize this HTML  element when altering.
            'less_' . $file_key,
          ];
        }
      }
    };
  }
  
  return $html;
}

function _less_build_css_path($matches, $base = NULL) {
  $_base = &drupal_static(__FUNCTION__);
  // Store base path for preg_replace_callback.
  if (isset($base)) {
    $_base = $base;
  }

  // Prefix with base and remove '../' segments where possible.
  $path = $_base . $matches[1];
  $last = '';
  while ($path != $last) {
    $last = $path;
    $path = preg_replace('`(^|/)(?!\.\./)([^/]+)/\.\./`', '$1', $path);
  }
  return 'url(' . $path . ')';
}

/**
 * Implements hook_admin_menu_cache_info().
 */
function less_admin_menu_cache_info() {
  
  $caches = array();
  
  // Add item to admin_menu's flush caches menu.
  $caches['less'] = array(
    'title' => t('LESS compiled files'),
    'callback' => 'less_flush_caches',
  );
  
  return $caches;
}

/**
 * Implements hook_cron_queue_info().
 *
 * This hook runs before cache flush during cron. Reliably lets us know if its
 * cron or not.
 */
function less_cron_queue_info() {

  drupal_static('less_cron', TRUE);
}

/**
 * Implements hook_flush_caches().
 *
 * Triggers rebuild of all LESS files during cache flush, except during cron.
 */
function less_flush_caches() {
  if (!drupal_static('less_cron')) {
    
    // Rebuild the less files directory.
    _less_get_dir(TRUE);
    drupal_flush_all_caches();
  }

  less_clear_css_cache();

  return array();
}

/**
 * Deletes all stale compiled LESS files that are no longer in use.
 *
 * @see drupal_delete_file_if_stale().
 */
function less_clear_css_cache() {
  
  $delete_stale = function($uri) {
    // Default stale file threshold is 30 days.
    if (REQUEST_TIME - filemtime($uri) > \Drupal::config('system.performance')->get('stale_file_threshold')) {
      file_unmanaged_delete($uri);
    }
  };

  file_scan_directory(LESS_DIRECTORY, '/.+/', array('callback' => $delete_stale));
}

/**
 * Get/(re)generate current 'less_dir' variable.
 * 
 * @param bool $rebuild
 *   Flag to rebuild compiled output.
 * 
 * @return string
 *   current 'less_dir' Drupal variable value.
 */
function _less_get_dir($rebuild = FALSE) {
  
  $config = \Drupal::config('less.settings');
  
  $less_dir = $config->get('less_dir');
  
  // If drupal variable 'less_dir' is not set, empty, or manually reset, then
  // generate a new unique id and save it.
  if ($rebuild || empty($less_dir)) {
    
    // Set the less directory variable.
    \Drupal::configFactory()->getEditable('less.settings')->set('less_dir', \Drupal\Component\Utility\Crypt::hashBase64(uniqid('', TRUE)))->save();
  }
  
  return $config->get('less_dir');
}

/**
 * Loads the selected LESS engine, or 'lessphp' for legacy reasons.
 * 
 * @return bool
 *   TRUE if selected LESS engine is loaded.
 */
function _less_inc() {
  static $loaded = NULL;
  
  if (!isset($loaded)) {
    
    $config = \Drupal::config('less.settings');
  
    $less_engine = $config->get('less_engine') ?: 'lessphp';
    
    if (($less_engine_library = libraries_load($less_engine)) && $less_engine_library['installed']) {
      $loaded = $less_engine;
    }
  }
  
  return $loaded;
}

/**
 * Keeps track of .less file "ownership".
 * 
 * This keeps track of which modules and themes own which .less files, and any
 * variable defaults those system items define.
 * 
 * Only tracks .less files that are added through .info files.
 */
function _less_registry() {
  $static_stylesheets = &drupal_static('less_stylesheets');
  $static_defaults = &drupal_static('less_defaults');
  
  if (!isset($static_stylesheets) || !isset($static_defaults)) {
    
    if (($cache_stylesheets = \Drupal::cache()->get('less:stylesheets')) && ($cache_defaults = \Drupal::cache()->get('less:defaults'))) {
      $static_stylesheets = $cache_stylesheets->data;
      $static_defaults = $cache_defaults->data;
    }
    else {
      
      $system_types = array(
        'module_enabled',
        'theme',
      );
      
      foreach ($system_types as $system_type) {
        $system_items = system_list($system_type);
        
        foreach ($system_items as $system_item_name => $system_item) {
          
          // Register all globally included .less stylesheets.
          if (!empty($system_item->info['stylesheets'])) {
            foreach ($system_item->info['stylesheets'] as $stylesheets) {
              foreach ($stylesheets as $stylesheet) {
                if (_less_is_less_filename($stylesheet)) {
                  $static_stylesheets[$stylesheet] = $system_item_name;
                }
              }
            }
          }
          
          // Process LESS settings from .info files.
          if (isset($system_item->info['less']) && is_array($system_item->info['less'])) {
            
            // Register all non-global stylesheets.
            if (isset($system_item->info['less']['sheets']) && is_array($system_item->info['less']['sheets'])) {
              
              $system_item_path = drupal_get_path($system_item->type, $system_item->name);
              
              foreach ($system_item->info['less']['sheets'] as $stylesheet) {
                $static_stylesheets[$system_item_path . '/' . $stylesheet] = $system_item_name;
              }
            }
            
            // Register variable defaults.
            if (isset($system_item->info['less']['vars']) && is_array($system_item->info['less']['vars'])) {
              $static_defaults[$system_item_name] = $system_item->info['less']['vars'];
            }
          }
          
          // Invoke hook_less_variables(), results should be static.
          if (\Drupal::moduleHandler()->moduleExists($system_item_name) && ($module_defaults = \Drupal::moduleHandler()->invoke($system_item_name, 'less_variables'))) {
            $static_defaults[$system_item_name] = array_replace((array) $static_defaults[$system_item_name], array_filter($module_defaults));
          }
        }
      }

      \Drupal::cache()->set('less:stylesheets', $static_stylesheets);
      \Drupal::cache()->set('less:defaults', $static_defaults);
    }
  }
  
}

/**
 * Returns .less file "owner".
 * 
 * Returns the owning module/theme for a passed in .less file, or NULL.
 * Only can resolve .less files that are added using .info files.
 * 
 * @param string $filepath
 *   System path to .less file, relative to DRUPAL_ROOT.
 * 
 * @return string|NULL
 *   System name of .less file "owner" or NULL in case of no known "owner".
 */
function _less_file_owner($filepath) {
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['cache'] = &drupal_static('less_stylesheets');
    
    if (!isset($drupal_static_fast['cache'])) {
      _less_registry();
    }
  }
  $stylesheets_cache = &$drupal_static_fast['cache'];
  
  return isset($stylesheets_cache[$filepath]) ? $stylesheets_cache[$filepath] : NULL;
}

/**
 * Returns the compiled list of variables and functions for a module/theme.
 * 
 * @param string $system_name
 *   Module/theme system name. NULL is cast to empty string for array indexes.
 */
function less_get_settings($system_name = NULL) {
  
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['cache'] = &drupal_static(__FUNCTION__);
  }
  $less_settings_static = &$drupal_static_fast['cache'];
  
  
  if (!isset($less_settings_static[$system_name])) {
    
    $theme = \Drupal::config('system.theme')->get('default');;

    $valid_module = !empty($system_name) && module_exists($system_name);

    $theme_settings = theme_get_setting('less', $theme);
    
    $defaults_cache = &drupal_static('less_defaults');
    
    if (!isset($defaults_cache)) {
      _less_registry();
    }
    
    $config = \Drupal::config('less.settings');
    
    // Defaults.
    $data = array(
      'build_cache_id' => _less_get_dir(),
      'variables' => array(),
      'functions' => array(
        'token' => '_less_token_replace',
      ),
      'paths' => array(),
      LESS_AUTOPREFIXER => (bool) $config->get(LESS_AUTOPREFIXER) ?: FALSE,
      LESS_DEVEL => (bool) $config->get(LESS_DEVEL) ?: FALSE,
      LESS_SOURCE_MAPS => (bool) $config->get(LESS_SOURCE_MAPS) ?: FALSE,
      'theme' => $theme,
    );
    
    
    /*
     * Compile the LESS variables.
     */
    // Cached default variables from .info files and hook_less_variables().
    if (!empty($defaults_cache[$system_name])) {
      $data['variables'] = array_replace($data['variables'], array_filter($defaults_cache[$system_name]));
    }
    
    // Saved variable values from current theme.
    if (!is_null($theme_settings) && !empty($theme_settings[$system_name])) {
      $data['variables'] = array_replace($data['variables'], array_filter($theme_settings[$system_name]));
    }
    
    // Prevent $system_name from being altered.
    $alter_system_name = $system_name;
    // Invoke hook_less_variables_alter().
    \Drupal::moduleHandler()->alter('less_variables', $data['variables'], $alter_system_name);
    // Invoke hook_less_variables_SYSTEM_NAME_alter().
    \Drupal::moduleHandler()->alter('less_variables_' . $system_name, $data['variables']);
    
    
    /*
     * Grab the LESS functions.
     * 
     * LESS functions are not stored in the cache table since they could be
     * anonymous functions.
     */
    if ($valid_module && \Drupal::moduleHandler()->hook($system_name, 'less_functions')) {
      $data['functions'] = array_replace($data['functions'], (array) \Drupal::moduleHandler()->invoke($system_name, 'less_functions'));
    }
    
    // Prevent $system_name from being altered.
    $alter_system_name = $system_name;
    // Invoke hook_less_functions_alter().
    \Drupal::moduleHandler()->alter('less_functions', $data['functions'], $alter_system_name);
    // Invoke hook_less_functions_SYSTEM_NAME_alter().
    \Drupal::moduleHandler()->alter('less_functions_' . $system_name, $data['functions']);
    
    
    /*
     * Grab the LESS include paths.
     * 
     */
    if ($valid_module && \Drupal::moduleHandler()->invoke($system_name, 'less_paths')) {
      $data['paths'] = array_unique(array_merge($data['paths'], (array) \Drupal::moduleHandler()->invoke($system_name, 'less_paths')));
    }
    
    // Prevent $system_name from being altered.
    $alter_system_name = $system_name;
    // Invoke hook_less_paths_alter().
    \Drupal::moduleHandler()->alter('less_paths', $data['paths'], $alter_system_name);
    // Invoke hook_less_paths_SYSTEM_NAME_alter().
    \Drupal::moduleHandler()->alter('less_paths_' . $system_name, $data['paths']);
    
    $data['paths'] = array_unique($data['paths']);
    
    $less_settings_static[$system_name] = $data;
  }
  
  // Don't need to test isset(), there will always be data at $system_name.
  return $less_settings_static[$system_name];
}

/**
 * Handler for LESS function token().
 *
 * @param string[] $arg
 *
 * @return array
 */
function _less_token_replace($arg) {
  list($type, $delimiter, $value) = $arg;
  
  return array($type, $delimiter, array(token_replace($value[0])));
}

/**
 * Helper function that attempts to create a folder if it doesn't exist.
 * 
 * Locks are used to help avoid concurrency collisions.
 * 
 * @param string $directory_path
 *   Directory of which to create/confirm existence.
 * 
 * @return bool
 *   Value indicating existence of directory.
 */
function _less_ensure_directory($directory_path) {
  
  $is_dir = is_dir($directory_path);
  
  if (!$is_dir) {
    
    $lock_id = 'less_directory_' . md5($directory_path);
   
    $lock = \Drupal::lock();
    
    // Attempt to create directory only 3 times, else delay is too long.
    for ($i = 0; $i < 3; $i++) {
      
      if ($lock->acquire($lock_id) && $is_dir = file_prepare_directory($directory_path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
        // Creation was successful, cancel the 'for' loop;
        break;
      }
      
      $lock->wait($lock_id, 1);
    }
    
    $lock->release($lock_id);
    
    if (!$is_dir) {
      // There is a problem with the directory.
      $message_vars = array(
        '@dir' => $directory_path,
      );
      
      \Drupal::logger('LESS')->error(t('LESS could not create a directory in @dir', $message_vars));
      
      if (\Drupal::currentUser()->hasPermission(LESS_PERMISSION)) {
        drupal_set_message(t('LESS could not create a directory in @dir', $message_vars), 'error');
      }
      
    }
  }
  
  return $is_dir;
}

/**
 * Return keys from array that match '.less' file extension.
 * 
 * @param array $items
 *   An array where keys are expected to be filepaths.
 * 
 * @return array
 *   Array of matching filepaths.
 */
function _less_children($items) {
  
  return array_filter(array_keys($items), '_less_is_less_filename');
  
}

/**
 * Check if filename has '.less' extension.
 * 
 * @param string $filename
 *   File name/path to search for '.less' extension.
 * 
 * @return bool
 *   TRUE if $filename does end with '.less'.
 */
function _less_is_less_filename($filename) {
  
  return drupal_substr($filename, -5) === '.less';
}

/**
 * Implements hook_less_engines().
 *
 * @return string[]
 */
function less_less_engines() {

  return array(
    'less.php' => 'Drupal\less\Plugin\engines\LessEngineLess_php',
    'lessphp' => 'Drupal\less\Plugin\engines\LessEngineLessphp',
    'less.js' => 'Drupal\less\Plugin\engines\LessEngineLess_js',
  );
}

/**
 * @return \LessEngineInterface[]
 */
function _less_get_engines() {

  $registered_engines = \Drupal::moduleHandler()->invokeAll('less_engines');
  \Drupal::moduleHandler()->alter('less_engines', $registered_engines);

  return $registered_engines;
}

/**
 * @param $input_file_path
 *
 * @return \LessEngine
 *
 * @throws Exception
 */
function less_get_engine($input_file_path) {

  $engines = _less_get_engines();
  $selected_engine = _less_inc();

  if (!empty($engines[$selected_engine])) {

    $class = $engines[$selected_engine];

    return new $class($input_file_path);
  }
  else {

    throw new Exception('Unable to load LessEngine.');
  }
}
